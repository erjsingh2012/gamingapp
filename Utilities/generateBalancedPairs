const fs = require('fs');

const INPUT = 'balanced_tile_pairs.txt';
const OUTPUT = 'sorted_tile_pairs.txt';

function parsePairs(text) {
  const lines = text.split('\n').map(l => l.trim()).filter(Boolean);
  const pairs = [];

  for (let i = 0; i < lines.length; i += 3) {
    const p1 = lines[i + 1].split('|')[0].trim().slice(5);
    const p2 = lines[i + 2].split('|')[0].trim().slice(5);
    const score1 = parseInt(lines[i + 1].split('Score:')[1]);
    const score2 = parseInt(lines[i + 2].split('Score:')[1]);

    pairs.push({ p1, p2, score1, score2 });
  }
  return pairs;
}

function evaluatePair(pair) {
  const avgScore = (pair.score1 + pair.score2) / 2;
  const scoreDiff = Math.abs(pair.score1 - pair.score2);

  const overlap = pair.p1.split('').filter(ch => pair.p2.includes(ch)).length;
  const overlapPenalty = overlap > 3 ? overlap - 3 : 0;

  // simple quality metric
  return {
    ...pair,
    quality: avgScore - scoreDiff - overlapPenalty
  };
}

function sortPairs(pairs) {
  return pairs
    .map(evaluatePair)
    .sort((a, b) => b.quality - a.quality);
}

function formatPairs(pairs) {
  return pairs.map((p, i) =>
    `Pair ${i + 1}:\n` +
    `  P1: ${p.p1} | Score: ${p.score1}\n` +
    `  P2: ${p.p2} | Score: ${p.score2}`
  ).join('\n\n');
}

// === RUN ===
const raw = fs.readFileSync(INPUT, 'utf-8');
const parsed = parsePairs(raw);
const sorted = sortPairs(parsed);
fs.writeFileSync(OUTPUT, formatPairs(sorted), 'utf-8');
console.log(`✅ Sorted ${sorted.length} pairs → saved to ${OUTPUT}`);
